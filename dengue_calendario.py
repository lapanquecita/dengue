"""

Una gr√°fica de tipo calendario es esencialmente un mapa de calor (heatmap).
sin embargo, nuestra versi√≥n es m√°s complicada al tener m√°s detalles visuales.

"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go
from PIL import Image
from plotly.subplots import make_subplots

# Estas abreviaciones son usadas para las etiquetas arriba del calenario.
MESES_ABREVIACIONES = [
    "Ene.", "Feb.", "Mar.", "Abr.",
    "May.", "Jun.", "Jul.", "Ago.",
    "Sep.", "Oct.", "Nov.", "Dic."
]

# Estos nombres son utilizados para la tabla de estad√≠sticas.
MESES_NOMBRES = [
    "enero", "febrero", "marzo", "abril",
    "mayo", "junio", "julio", "agosto",
    "septiembre", "octubre", "noviembre", "diciembre"
]

# Estas llaves y valores son utilizados para el eje vertical del calendario.
DIAS_DICT = {
    0: "Lun.",
    1: "Mar.",
    2: "Mi√©.",
    3: "Jue.",
    4: "Vie.",
    5: "S√°b.",
    6: "Dom."
}


def main(a√±o):
    """
    Crea un calendario donde se muestra el n√∫mero de nuevas
    infecciones por d√≠a de dengue en M√©xico.

    Parameters
    ----------
    a√±o: int
        El a√±o que se desea graficar.

    """

    # Cargamos el dataset de dengue del a√±o que nos interesa.
    # Seleccinamos la columna de 'FECHA_SIGN_SINTOMAS' como nuestro √≠ndice.
    df = pd.read_csv(
        f"./data/{a√±o}.csv",
        parse_dates=["FECHA_SIGN_SINTOMAS"],
        index_col="FECHA_SIGN_SINTOMAS",
        dayfirst=True,
    )

    # IMPORTANTE: Solo seleccionamos casos confirmados.
    df = df[df["ESTATUS_CASO"] == 2]

    # Contamos que mes tuvo m√°s registros.
    mes_max = df.index.month.value_counts()[:1]

    # Contamos los totales por d√≠a.
    # El m√©todo 'resample' es bastante √∫til al tener un √≠ndice tipo DateTimeIndex.
    totales_por_dia = df.resample("D").count()["ESTATUS_CASO"]

    # Creamos el cascar√≥n de un DataFrame para todos los d√≠as del a√±o de inter√©s.
    # Despu√©s le asignamos los valores de los totales reci√©n calculados.
    final = pd.DataFrame(
        index=pd.date_range(f"{a√±o}-01-01", f"{a√±o}-12-31"),
        data={"total": totales_por_dia}
    )

    # Determinamos los valores m√≠nimos y m√°ximos para nuestra escala.
    # Para el valor m√°ximo usamos el 95 percentil para mitigar los
    # efectos de valores at√≠picos.
    valor_min = final["total"].min()
    valor_max = final["total"].quantile(0.95)

    # Vamos a crear nuestra escala con 9 intervalos.
    marcas = np.linspace(valor_min, valor_max, 9)
    etiquetas = list()

    for marca in marcas:
        etiquetas.append(f"{marca:,.0f}")

    # A la √∫ltima etiqueta le agregamos el s√≠mbolo de 'mayor o igual que'.
    etiquetas[-1] = f"‚â•{etiquetas[-1]}"

    #################################################
    # A partir de aqu√≠ las cosas se ponen complicadas.
    #################################################

    # Un a√±o tiene por lo general de 52 a 53 semanas
    # pero cada 28 a√±os tiene 54.

    # Parte del algoritmo es asignarle un n√∫mero de semana a cada d√≠a.
    # No podemos usar la propiedad 'week' del objeto DateTime ya que nos
    # devuelve la del calendario Gregoriano (que puede ser del a√±o anterior).

    # Vamos a crear una lista que nos da 7 veces el n√∫mero de semana
    # para 54 semanas.
    numero_semana = list()

    for semana in range(54):
        numero_semana.extend([semana for _ in range(7)])

    # Creamos una columna con el d√≠a de la semana.
    # Donde 0 es lunes y 6 es domingo.
    final["dayofweek"] = final.index.dayofweek

    # Para determinar el n√∫mero de semana de tada d√≠a
    # debemos ajustar desde el primer d√≠a del a√±o (semana 0).
    # Pero no todos los a√±os comienzan en lunes.
    # Lo que hacemos es recortar nuestra lista de numero de semana
    # exactamente donde comienza el a√±o y donde termina y el
    # resultado se agrega a una nueva columna en el DataFrame.
    pad = final.index[0].dayofweek
    final["semana"] = numero_semana[pad:len(final) + pad]

    # En nuestro calendario, el primer d√≠a de cada mes tendr√° un borde para distinguirlo.
    final["borde"] = final.index.map(lambda x: 1 if x.day == 1 else 0)

    # Calculamos algunas estad√≠sticas que ir√°n debajo del calendario.
    stats_max = f"{final['total'].max():,.0f} el {final['total'].idxmax():%d/%m/%Y}"
    month_max = f"{mes_max.max():,.0f} en {MESES_NOMBRES[mes_max.idxmax() - 1]}"
    stats_total = f"{final['total'].sum():,.0f}"
    stats_mean = f"{final['total'].sum() / len(final):,.1f}"

    # Las etiquetas de los meses estar√°n uniformemente espaciados.
    marcas_meses = np.linspace(1.5, 49.5, 12)

    # Vamos a crear un lienzo con tres elmentos:
    # (2) Heatmaps sobrepuestos y (1) Table
    fig = make_subplots(
        rows=2,
        cols=1,
        row_heights=[250, 150],
        vertical_spacing=0.07,
        specs=[
            [{"type": "scatter"}],
            [{"type": "table"}]
        ]
    )

    # El primer Heatmap va a tener un solo proposito y es el
    # de mostrar el borde en el primer d√≠a de cada mes.
    # Es importante poner atenci√≥n en los par√°metros 'gap', ya que
    # el borde es un truco visual.
    fig.add_trace(
        go.Heatmap(
            x=final["semana"],
            y=final["dayofweek"],
            z=final["borde"],
            xgap=1,
            ygap=12,
            colorscale=["hsla(0, 100%, 100%, 0.0)",
                        "hsla(0, 100%, 100%, 1.0)"],
            showscale=False,
        ), col=1, row=1
    )

    # Este heatmap va a mostrar los valores de cada d√≠a.
    # Est√° configurado con la mayor√≠a de variables que definimos anteriormente.
    fig.add_trace(
        go.Heatmap(
            x=final["semana"],
            y=final["dayofweek"],
            z=final["total"],
            xgap=5,
            ygap=16,
            zmin=valor_min,
            zmax=valor_max,
            colorscale="rainbow",
            colorbar=dict(
                title_text="<br>N√∫mero de registros",
                title_side="right",
                y=0.6,
                ticks="outside",
                outlinewidth=1.5,
                thickness=20,
                outlinecolor="#FFFFFF",
                tickwidth=2,
                tickcolor="#FFFFFF",
                ticklen=10,
                tickfont_size=16,
                tickvals=marcas,
                ticktext=etiquetas,
            )
        ), col=1, row=1
    )

    # Agregamos una sencilla tabla con las estad√≠sticas que calculamos anteriormente.
    fig.add_trace(
        go.Table(
            header=dict(
                values=[
                    "<b>D√≠a con m√°s registros</b>",
                    "<b>Mes con m√°s registros</b>",
                    "<b>Total anual</b>",
                    "<b>Promedio diario</b>"
                ],
                font_color="#FFFFFF",
                fill_color="#f4511e",
                align="center",
                height=32,
                line_width=0.8),
            cells=dict(
                values=[
                    stats_max,
                    month_max,
                    stats_total,
                    stats_mean,
                ],
                fill_color="#041C32",
                height=32,
                line_width=0.8,
                align="center"
            )
        ), col=1, row=2
    )

    # Es importante fijar el rango del eje horizontal para
    # evitar que se distorcione.
    fig.update_xaxes(
        range=[-1, final["semana"].max() + 1],
        side="top",
        tickfont_size=20,
        ticktext=MESES_ABREVIACIONES,
        tickvals=marcas_meses,
        ticks="outside",
        ticklen=5,
        tickwidth=0,
        linecolor="#FFFFFF",
        tickcolor="#041C32",
        showline=True,
        zeroline=False,
        showgrid=False,
        mirror=True,
    )

    # Al igual que con el eje horizontal, fijamos el rango para darle
    # suficiente espacio a cada d√≠a de la semana.
    fig.update_yaxes(
        range=[6.75, -0.75],
        ticktext=list(DIAS_DICT.values()),
        tickvals=list(DIAS_DICT.keys()),
        ticks="outside",
        tickfont_size=16,
        ticklen=10,
        title_standoff=0,
        tickcolor="#FFFFFF",
        linewidth=1.5,
        showline=True,
        zeroline=False,
        showgrid=False,
        mirror=True,
    )

    # Un poco m√°s de personalizaci√≥n y agregamos las anotaciones correspondientes.
    fig.update_layout(
        showlegend=False,
        width=1280,
        height=533,
        font_family="Quicksand",
        font_color="#FFFFFF",
        font_size=20,
        title_text=f"D√≠a de inicio de s√≠ntomas de infecciones por dengue en M√©xico durante el {a√±o}",
        title_x=0.5,
        title_y=0.93,
        margin_t=120,
        margin_r=140,
        margin_b=0,
        margin_l=90,
        title_font_size=30,
        plot_bgcolor="#041C32",
        paper_bgcolor="#04293A",
        annotations=[
            dict(
                x=0.01,
                y=0.04,
                xref="paper",
                yref="paper",
                xanchor="left",
                yanchor="top",
                text=f"Fuente: SSA (13/12/{a√±o})"
            ),
            dict(
                x=0.5,
                y=0.04,
                xref="paper",
                yref="paper",
                xanchor="center",
                yanchor="top",
                text="El ‚ñ° Indica el inicio de cada mes"
            ),
            dict(
                x=1.01,
                y=0.04,
                xref="paper",
                yref="paper",
                xanchor="right",
                yanchor="top",
                text="üßÅ @lapanquecita"
            )
        ]
    )

    fig.write_image(f"./calendario_{a√±o}.png")


if __name__ == "__main__":

    main(2023)
